<?php


namespace QuinenCake\Controller;


use App\Controller\AppController;
use Cake\Datasource\ConnectionManager;
use Cake\Event\Event;

class IndexController extends AppController
{
    use InitTrait;

    public function beforeRender(Event $event)
    {
        $this->initUiHelpers();
        $this->initBs4Helpers();

        $this->viewBuilder()->setLayout('QuinenCake.bs4_cdn');

        $_menu = [
            [
                'icon' => 'database',
                'text' => 'BDD',

                'link' => [
                    'controller' => 'Index',
                    'action' => 'bdd'
                ]

            ]
        ];
        $this->set(compact('_menu'));

        return parent::beforeRender($event); // TODO: Change the autogenerated stub

    }

    public function bdd()
    {
        $connections = ConnectionManager::configured();

        $bdds = [];

        foreach ($connections as $connection) {
            $tables = [];
            $desc = null;

            try {
                $schemaCollection = ConnectionManager::get($connection)->getSchemaCollection();
                $tables = $schemaCollection->listTables();
            } catch (\Exception $e) {
                $desc = $e->getMessage();
                $bdds[] = compact('connection', 'desc');
            }

            foreach ($tables as $table) {

                $tableSchema = $schemaCollection->describe($table);
                $fields = $tableSchema->columns();
                foreach ($fields as $field) {


                    $fieldInfos = $tableSchema->getColumn($field);

                    $bdds[] = compact('connection', 'desc', 'table', 'field') + $fieldInfos;
                    unset($fieldInfos['type']);
                    unset($fieldInfos['length']);
                    unset($fieldInfos['null']);
                    unset($fieldInfos['default']);
                    unset($fieldInfos['comment']);
                    unset($fieldInfos['precision']);
                    unset($fieldInfos['collate']);
                    unset($fieldInfos['fixed']);
                    unset($fieldInfos['unsigned']);
                    unset($fieldInfos['autoIncrement']);
                    if(!empty($fieldInfos)){
                        debug($fieldInfos);
                    }


                }


            }


        }

        $this->set(compact('bdds'));
    }

    public function test()
    {

    }
}
